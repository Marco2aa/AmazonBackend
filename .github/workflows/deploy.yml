name: Deploy to EC2 (simple SSH)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none

      - name: Composer install (prod)
        env:
          COMPOSER_MEMORY_LIMIT: -1
          SYMFONY_SKIP_AUTO_SCRIPTS: 1
          APP_ENV: prod
        run: composer install --no-dev --prefer-dist --no-progress --optimize-autoloader --no-scripts

        - name: Debug workspace
          run: |
            pwd && ls -la
            echo "git root:"
            git rev-parse --show-toplevel

      - name: Pack release (explicit + sanity checks)
        run: |
          RELEASE="release-${{ github.sha }}"
          mkdir -p .deploy/$RELEASE

          # Copie EXPLICITE des éléments nécessaires
          for p in bin config migrations public src vendor composer.json composer.lock symfony.lock; do
            if [ -e "$p" ]; then
              rsync -a "$p" .deploy/$RELEASE/
            fi
          done

          # Ne JAMAIS embarquer les .env locaux
          rm -f .deploy/$RELEASE/.env* || true

          echo "=== Contenu avant tar ==="
          (cd .deploy/$RELEASE && ls -la && echo "bin:" && ls -la bin 2>/dev/null || true && echo "public:" && ls -la public 2>/dev/null || true)

          # Sanity checks : on stoppe si release invalide
          test -f .deploy/$RELEASE/public/index.php
          test -f .deploy/$RELEASE/bin/console

          tar -czf $RELEASE.tar.gz -C .deploy $RELEASE
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      # Écrit la clé privée depuis le secret (en supprimant d'éventuels \r Windows)
    # écrit la clé privée depuis le secret Base64
      - name: Write SSH key (from base64)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # auto-test de connexion (si ça passe, tout passe)
      - name: SSH self-test
        run: |
          ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ubuntu@${{ secrets.EC2_HOST }} 'echo OK-from-EC2 && whoami && hostname'

      - name: Ensure remote dirs
        run: |
          ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ubuntu@${{ secrets.EC2_HOST }} \
              'mkdir -p /var/www/aflokkat-marc.store/releases'

      - name: Upload tarball to EC2
        run: |
          scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ${RELEASE}.tar.gz \
              ubuntu@${{ secrets.EC2_HOST }}:/var/www/aflokkat-marc.store/releases/

      - name: Remote deploy switch
        run: |
          ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ubuntu@${{ secrets.EC2_HOST }} \
              "/var/www/aflokkat-marc.store/deploy_switch.sh /var/www/aflokkat-marc.store/releases/${RELEASE}.tar.gz"
